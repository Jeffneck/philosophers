dead lock : accessible a tous les philos, donc mutex 
write lock :  





PHILO lOOP
un philo loop tant que end_simulation est false
un philo eat tant qu' il n' est pas full un philo full va modifier la variable nb_philo_full(mutex) puis alterner entre sleep et think
un philo mort va modifier la variable death_detected

MONITORING LOOP
if death_detected == 1 || nb_philos_full == nb_philos 
	end_simulation = 1;

GESTION END SIMULATION
avant chaque ecriture de philo, verifier if (end_simulation == false)


on cree tous les mutex , Si err appel a destroy_all_mutex
on cree tous les threads philos,

routine_philo va alterner, eat, sleep, think...


que se passe t il 

	if (pair)
	{
		philo->first_fork = &(forks[philo->id % philo->rules->philos_nbr]);
		philo->second_fork = &(forks[philo->id - 1]);
	}
	else
	{
		philo->first_fork = &(forks[philo->id - 1]);
		philo->second_fork = &(forks[philo->id]);
	}

1 = 0/1
2 = 2/1
3 = 2/3
4 = 4/3
5 = 4/5
6 = 6/5
7 = 0/6

1vs7 2vs3 4vs5 6vs/ => 1 2 6 1vs2 6vs/ => 1 6 +200ms
2vs3 4vs5 7vs/ => 2 5 7 +200ms
1vs7 3vs/ 4vs/ 6vs/ =>  1 3 4 6 1vs/ 3vs4 6vs/ => le 3 ou 4 est mort


	1 = 0/1
2 = 2/1
	3 = 2/3
4 = 4/3
	5 = 4/5
6 = 6/5
	7 = 0/6

desynchronisation des threads pairs impairs
1vs7 3 5 => 1 3 5 || 0->200
246 200->
357
246
135
246
357

2vs3 4vs5 7vs/ => 2 5 7 +200ms
1vs7 3vs/ 4vs/ 6vs/ =>  1 3 4 6 1vs/ 3vs4 6vs/ => 






faire une fonction simulation_ended qui utilise le mutex pour verifier la variable end_simulation pus retourne un bool


chaque philo verifie si nb_full et dead sont ok et remet `a jour les variables avec de nouvelles valeurs

update_n_check_end_conditions()


access_end_condition

monitor doit verifier toutes les - de 10 ms si personne n' est mort
il regarde si tous les philos sont full (var full) et calcule si un philo est dead (var last_meal) (meal lock => modifiable par philos)
met a jour le statut du dinner par end = true (end lock = visionnalble par write)

monitor
meal lock LOCK
if (evreyonefull || one died)
end_lock

meal lock UNLOCK


un philo qui mange, ouvre meal_lock => print msg is eating => met a jour lastmeal